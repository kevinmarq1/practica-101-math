---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}

library(ggplot2)
airbnb<-read.csv("C:/Users/Admin/estadistica-datamining/practica/air-bnb-listings.csv",sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
ncol(airbnb)
colnames(airbnb)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
columnas_de_interest <- c('City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude')
airbnb_col_int <- airbnb[columnas_de_interest]
df_madrid <- airbnb_col_int[airbnb_col_int$City == "Madrid" & airbnb_col_int$Room.Type =="Entire home/apt" & airbnb_col_int$Neighbourhood != "",]
# Seleccionar las columnas de interés
columnas_de_interes <- c('Neighbourhood', 'Accommodates', 'Bathrooms', 'Bedrooms', 'Beds', 'Price', 'Square.Feet', 'Guests.Included', 'Extra.People', 'Review.Scores.Rating', 'Latitude', 'Longitude')
df_madrid <- df_madrid[columnas_de_interes]
colnames(df_madrid)
```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}
df_madrid$Square.meters <- df_madrid$Square.Feet*0.092903
```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
cat("el total de apartamentos son", nrow(df_madrid),"\n")
cat("los que tienen NA en sus metros cuadrados son", sum(is.na(df_madrid$Square.meters)),"\n")
porcent_na <- sum(is.na(df_madrid$Square.meters)/nrow(df_madrid) )*100
cat("El porcentaje es ", porcent_na)
```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}
# Filtrar los apartamentos que tienen un valor de metros cuadrados diferente de NA
Madrid_no_na <- df_madrid[!is.na(df_madrid$Square.meters), ]

# Contar el número total de apartamentos válidos
total_valid_apartments <- nrow(Madrid_no_na)
cat("El número de pisos que no tienen NA son:", total_valid_apartments, "\n")

# Contar el número de apartamentos que tienen 0 metros cuadrados
ceros_no_na <- nrow(Madrid_no_na[Madrid_no_na$Square.meters == 0, ])
cat("El número de pisos que tienen 0 metros son:", ceros_no_na, "\n")

# Calcular el porcentaje de apartamentos con 0 metros cuadrados
porcentaje <- (ceros_no_na / total_valid_apartments) * 100
cat("El porcentaje es:", porcentaje, "%\n")


```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}
df_madrid$Square.meters <- ifelse(df_madrid$Square.meters==0, NA, df_madrid$Square.meters)
cat("ahora todos los pisos con Na suman:", sum(is.na( df_madrid$Square.meters)))
```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
library(ggplot2)
ggplot(df_madrid, aes(x = Square.meters)) +
  geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "Histograma de Metros Cuadrados", x = "Metros Cuadrados", y = "Frecuencia") +
  theme_minimal()
ggplot(df_madrid_no_na, aes(x= Square.meters))+
  geom_histogram(binwidth  =5, fill= "blue", color= "black", alpha= 0.7)+
  labs(title =  "histograma sin na" , x= "Metros cuadrados" )+
  theme_minimal()
```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
df_madrid$Square.meters <- ifelse(df_madrid$Square.meters < 20, NA , df_madrid$Square.meters)
cat("la suma de todos los NA asignando tambien a los que tienen menos de 20mts2 son:", sum(is.na(df_madrid$Square.meters)))
```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

```{r}
# Identificar los barrios con todos los valores de Square.Meters como NA
barrios_na <- unique(df_madrid$Neighbourhood[is.na(df_madrid$Square.Meters)])

# Eliminar los pisos que pertenecen a estos barrios
df_madrid <- df_madrid[!df_madrid$Neighbourhood %in% barrios_na, ]
# Contar el número de valores NA en la columna Square.Meters
num_na <- sum(is.na(df_madrid$Square.Meters))

# Verificar que los barrios con todos los valores de Square.Meters como NA han sido eliminados
num_na
```

```         
------------------------------------------------------------------------
```

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías? R= el mejor test para evaluar si todos los barrios tienen la misma media es un anova test.

```{r}
anova_result <- aov(Square.meters~ Neighbourhood, data = df_madrid)
summary(anova_result)
qqnorm(residuals(anova_result))
qqline(residuals(anova_result))

```

```         
------------------------------------------------------------------------
```

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

```{r}
# Realizar el test de Tukey
tky <- TukeyHSD(anova_result) 
tky.result <- data.frame(tky$Neighbourhood) 
# Obtener los nombres de los barrios 
cn <- sort(unique(df_madrid$Neighbourhood)) 
# Crear una matriz de p-valores ajustados 
resm <- matrix(NA, length(cn), length(cn)) 
rownames(resm) <- cn 
colnames(resm) <- cn 
# Llenar la matriz con los p-valores ajustados
resm[lower.tri(resm)] <- round(tky.result$p.adj, 4) 
resm[upper.tri(resm)] <- t(resm)[upper.tri(resm)]
diag(resm) <- 1 
# Convertir los p-valores en una medida de distancia (1 - p_valor) 
similarity_matrix <- 1 - resm
print(similarity_matrix)
```

R= al realizar el test de tukey, podemos ver que no hay diferencia significativa entre los barrios, porque el p valor es muy elevado, y lol lwr y upr son muy amplios y pasan por el 0.

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es bajo significa que los barrios son diferentes, si es alto significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

```{r}
distance_matrix <- similarity_matrix
dendrogram <- hclust(as.dist(distance_matrix))
plot(dendrogram, main = "Dendrograma de los Barrios", xlab = "Barrios", ylab = "Distancia", sub = "", cex = 0.6, las = 2)
```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

```{r}
clusters<- cutree(dendogram,h=0.5)
clusters
```

tendriamos un punto de corte en 0.5 ya que alli estan la mayoria de los barrios analizados teniendo 5 clusters agrupando los mas similares segun los datos arrojados den el test de tukey

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

```{r}
df_madrid$neighb_id <- clusters[df_madrid$Neighbourhood]
head(df_madrid)
```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

```{r}
# Cargar el paquete necesario
library(caTools)

# Fijar la semilla para reproducibilidad
set.seed(123)

# Eliminar filas con valores NA en Square.meters antes de dividir los datos
df_madrid_clean <- df_madrid[!is.na(df_madrid$Square.meters), ]

# Dividir los datos en conjuntos de entrenamiento y prueba (70% entrenamiento, 30% prueba)
split <- sample.split(df_madrid_clean$Square.meters, SplitRatio = 0.7)

# Crear el conjunto de datos de entrenamiento
train_set <- subset(df_madrid_clean, split == TRUE)

# Crear el conjunto de datos de prueba
test_set <- subset(df_madrid_clean, split == FALSE)

# Verificar el tamaño de los conjuntos de datos
cat("Tamaño del conjunto de entrenamiento:", nrow(train_set), "\n")
cat("Tamaño del conjunto de prueba:", nrow(test_set), "\n")

# Eliminar la columna Neighbourhood de ambos conjuntos de datos
train_set <- train_set[, !names(train_set) %in% c("Neighbourhood")]
test_set <- test_set[, !names(test_set) %in% c("Neighbourhood")]

# Verificar las primeras filas de los conjuntos de datos
head(train_set)
head(test_set)

```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}
colnames(df_madrid)
df_madrid <- na.omit(df_madrid)
model <- lm(Square.meters ~ . - Square.meters - Review.Scores.Rating - Latitude - Square.Feet - Longitude , data = train_set)
summary(model) 
```

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

```{r}
predictions <- predict(model, newdata = test_set)
# Calcular el error cuadrático medio (MSE) 
mse <- mean((test_set$Square.meters - predictions)^2) 
cat("Error Cuadrático Medio (MSE):", mse, "\n") 
# Calcular el R-cuadrado 
r_squared <- summary(model)$r.squared 
cat("R-cuadrado (R²):", r_squared, "\n")
```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

```{r}
new_apartment <- data.frame(
  Accommodates = 6,
  Bathrooms = 1,
  Bedrooms = 3,
  Beds = 3,
  Price = 80,
  Guests.Included = 6,  
  Extra.People = 0, 
  Review.Scores.Rating = 80,
  Latitude = 40.4168,   
  Longitude = -3.7038,  
  neighb_id = 1,
  Square.Feet = 10
  )
cat("los metros cuadradros del piso del anuncio serian", predict(model,newdata = new_apartment))
```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}
# Identificar las filas con valores NA en Square.Meters
na_rows <- is.na(df_madrid$Square.meters)

# Crear un dataframe con las filas que tienen valores NA en Square.Meters
na_data <- df_madrid[na_rows, ]

# Predecir los valores faltantes en Square.Meters
predicted_values <- predict(model, newdata = na_data)

# Rellenar los valores NA en Square.Meters con los valores predichos
df_madrid$Square.meters[na_rows] <- predicted_values

# Verificar que los valores NA han sido rellenados
any(is.na(df_madrid$Square.meters))
df_madrid$Square.meters
```

------------------------------------------------------------------------
